{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar \f4\fs20\lang2057 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar \f4\fs20\lang2057 \sbasedon0\snext15 endnote text;}{\s16\widctlpar \f4\fs20\lang2057 \sbasedon0\snext16 
footnote text;}{\*\cs17 \additive\super \sbasedon10 footnote reference;}{\*\cs18 \additive\super \sbasedon10 endnote reference;}}{\info{\author Gaurav}{\operator Gaurav}{\creatim\yr1998\mo3\dy6\min27}{\revtim\yr1998\mo3\dy6\min27}{\version2}{\edmins0}
{\nofpages5}{\nofwords426}{\nofchars2432}{\*\company IIT Delhi}{\vern57431}}\widowctrl\endnotes\aendnotes\ftnnrlc\aftnnar\hyphcaps0 \fet1\sectd \linex0 {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \li180\nowidctlpar \f4\fs20\lang2057 {\cs18\super *{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super B}{\f5\fs24 uildAll}}#{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {
\cs18\super C}{\f5\fs24 ontents}}${\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super C}{\f5\fs24 ontents}}+{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super i}{\f5\fs24 ndex:00001}}K{\footnote\ftnalt 
\pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super ;}{\f5\fs24 Contents;}}}{\b\f5\fs36\cf1 Contents}{\f5 
\par }\pard \nowidctlpar {\f5\uldb\cf11 Introduction}{\v\f5 Introduction}{\f5 
\par }{\f5\uldb\cf11 On things algorithmic..}{\v\f5 On_things_algorithmic..}{\f5 
\par }{\f5\uldb\cf11 To recomplie the code}{\v\f5 To_recompile_the_code}{\f5 
\par \page }{\cs18\super *{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super B}{\f5\fs24 uildAll}}#{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super I}{\f5\fs24 ntroduction}}${\footnote\ftnalt \pard\plain 
\nowidctlpar \f4\fs20\lang2057 {\cs18\super I}{\f5\fs24 ntroduction}}+{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super i}{\f5\fs24 ndex:00002}}K{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super ;}{\f5\fs24 
Introduction;}}}{\b\f5\fs36\cf1 Introduction}{\f5 
\par }{\f5\cf1 \tab Go Moku is a generalised brother of tic tac toe. Tic tac toe is about getting a 3 in a line on a 3x3 board: Go moku is obtained by cha
nging two 3's to N and the other to M... This is an interesting game and the question about for what M and N winning strategies exist is worth looking into. It is known that the first player can win for M = 4 and  N >= 6.}{\f5 
\par 
\par \page }{\cs18\super *{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super B}{\f5\fs24 uildAll}}#{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super O}{\f5\fs24 n_things_algorithmic..}}${\footnote\ftnalt 
\pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super O}{\f5\fs24 n things algorithmic..}}+{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super i}{\f5\fs24 ndex:00003}}K{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {
\cs18\super ;}{\f5\fs24 On things algorithmic..;}}}{\b\f5\fs36\cf1 On things algorithmic..}{\f5 
\par }{\f5\cf1 \tab A few words are in order  about why the program works as fast as it does. The programs speed is is the result of not using any lookahead or game trees. All that i
s used is an evaluation function. For deciding on the next move, all empty squares are evaluated and the best one selected. The evaluation itself works as follows: To evaluate the empty square (x,y) , consider all lines of length m passing through it. Her
e m is the number of thingies required in a line for a win. If the square is not cornerish 4m such lines pass through it. Consider one of these lines. If it contains O's ( for ours) and also X's ( for don't care), then this line is obviously not going to 
ma
ke it as the winning line, and hence provides no incentive for  us to play there. On the other hand, if there are only X's there, playing our O at (x,y) blocks a line of his: and hence adds to the goodness of (x,y). Also the more the number of X's in that
 row, the more goodness it adds. Thus the amount added is a function of how Xiting the line is. Similarly, if the line only has O's, playing an O there increases the likelyhood of this line making it as the winning line, and hence adds to the goodness of 
(x,y), again as a function of the Oacity of the line.\line \tab The functions we used for this goodness calculations are:\line                  f(i)=5^i\line                 g(0)=1\line                 g(i)=4*5^i-1}{\f5 
\par 
\par \page }{\cs18\super *{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super B}{\f5\fs24 uildAll}}#{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super T}{\f5\fs24 o_recompile_the_code}}${\footnote\ftnalt 
\pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super T}{\f5\fs24 o recompile the code}}+{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {\cs18\super i}{\f5\fs24 ndex:00004}}K{\footnote\ftnalt \pard\plain \nowidctlpar \f4\fs20\lang2057 {
\cs18\super ;}{\f5\fs24 To recompile the code;}}}{\b\f5\fs36\cf1 To recompile the code}{\f5 
\par }{\f5\cf1 File listing:\line 1.gomoku.ide: Project file \line 2.gomoku.mak: make file\line 3.gomoku.c  : main source code file\line 4.gomoku.inc: Windows entry function(included from gomoku.c)\line 5.gomoku.rc : Resource script file for project\line 
6.gomoku.def: def file needed to link the code\line 7.gomoku.exe: compile object code\line 8.gomoku.h  : Include file\line 9.gomoku.hlp: help file for gomoku\line 10.gomoku.hpj:help project file(to make help file)\line 
11.gomoku.rtf: help discription(to make helpfile)\line \line \line To recompile you need to:\line 1.open the make file(gomoku.mak)\line 2.modify the paths for libraries and includes in it\line 3.do make -f gomoku.mak\line \tab OR\line 
1.open project gomoku.ide in bc++\line 2.go to option menu click on projects>directories\line 3.modify the paths for libraries and includes\line 4.go to [gomoku.exe] node in project window and rigth click on it\line \tab select Target expert form popup
\line \tab set the options there appropriately i.e.\line \tab \tab Target type:Application\line \tab \tab Platform:Windows 3.x(16)\line \tab \tab Target model:Large\line \tab \tab Libraries:runtime class static\line 5.compile the project and run it}{\f5 

\par 
\par \page }
\par }